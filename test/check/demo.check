/* This program demonstrates check's output and simple uses */
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>

#suite Demo
#tcase Crash
//SIGSEGV
#test-signal(11) segfault
    int *i = NULL;
    *i = 1; //BOOM

#tcase Assert
#test ck_assert_ptr_nonnull
    int i = 1;
    int *p = &i;
    ck_assert_ptr_nonnull(p);

#test ck_assert_ptr_null
    int *i = NULL;
    ck_assert_ptr_null(i);

#test ck_assert_ptr_ne
    int *i = NULL, **j = &i;
    ck_assert_ptr_ne(i, j);

#test ck_assert_ptr_eq
    int *i = NULL, *j = NULL;
    ck_assert_ptr_eq(i, j);

#test ck_assert_mem_eq
    size_t count = sizeof (int) * 123;
    char *m1 = malloc(count);
    char *m2 = malloc(count);
    ck_assert_ptr_nonnull(m1);
    ck_assert_ptr_nonnull(m2);
    for(size_t i=0; i<123; i++)
        m1[i] = m2[i] = 'A';
    ck_assert_mem_eq(m1, m2, count);
    free(m1);
    free(m2);

#test ck_assert_pstr_ne
    ck_assert_pstr_ne("a", "b");

#test ck_assert_pstr_eq
    ck_assert_pstr_eq("a", "a");

#test ck_assert_str_ge
    ck_assert_str_ge("ab", "a");
    ck_assert_str_ge("b", "a");

#test ck_assert_str_gt
    ck_assert_str_gt("ab", "a");

#test ck_assert_str_le
    ck_assert_str_le("a", "ab");
    ck_assert_str_le("a", "a");

#test ck_assert_str_lt
    ck_assert_str_lt("ab", "b");

#test ck_assert_str_ne
    ck_assert_str_ne("a", "b");

#test ck_assert_str_eq
    ck_assert_str_eq("a", "a");

#test ck_assert_ldouble_nonnan
    ck_assert_ldouble_nonnan(123l);

#test ck_assert_ldouble_nan
    ck_assert_ldouble_nan(NAN);

#test ck_assert_ldouble_infinite
    ck_assert_ldouble_infinite(INFINITY);

#test ck_assert_ldouble_finite
    ck_assert_ldouble_finite(12345l);

#test ck_assert_ldouble_le_tol
    ck_assert_ldouble_le_tol(1.4, 1.5, 0.2);

#test ck_assert_ldouble_ge_tol
    ck_assert_ldouble_ge_tol(1.5, 1.4, 0.2);

#test ck_assert_ldouble_ne_tol
    ck_assert_ldouble_ne_tol(1.4, 1.6, 0.2);

#test ck_assert_ldouble_eq_tol
    ck_assert_ldouble_eq_tol(1.4, 1.4, 0.1);

#test ck_assert_ldouble_ge
    ck_assert_ldouble_ge(1.5, 1.4);
    ck_assert_ldouble_ge(1.4, 1.4);

#test ck_assert_ldouble_gt
    ck_assert_ldouble_gt(1.5, 1.4);

#test ck_assert_ldouble_le
    ck_assert_ldouble_le(1.3, 1.4);
    ck_assert_ldouble_le(1.4, 1.4);

#test ck_assert_ldouble_lt
    ck_assert_ldouble_lt(1.3, 1.4);

#test ck_assert_ldouble_ne
    ck_assert_ldouble_ne(1.3, 1.4);

#test ck_assert_ldouble_eq
    ck_assert_ldouble_eq(1.3, 1.3);

#test ck_assert_double_nonnan
    ck_assert_double_nonnan(1.3);

#test ck_assert_double_nan
    ck_assert_double_nan(NAN);

#test ck_assert_double_infinite
    ck_assert_double_infinite(INFINITY);

#test ck_assert_double_finite
    ck_assert_double_finite(1.5);

#test ck_assert_double_le_tol
    ck_assert_double_le_tol(1.2, 1.4, 0.1);

#test ck_assert_double_ge_tol
    ck_assert_double_ge_tol(1.4, 1.2, 0.1);

#test ck_assert_double_ne_tol
    ck_assert_double_ne_tol(1.2, 1.4, 0.1);

#test ck_assert_double_eq_tol
    ck_assert_double_eq_tol(1.2, 1.4, 0.2);

#test ck_assert_double_ge
    ck_assert_double_ge(1.3, 1.2);
    ck_assert_double_ge(1.2, 1.2);

#test ck_assert_double_gt
    ck_assert_double_gt(1.3, 1.2);

#test ck_assert_double_le
    ck_assert_double_le(1.3, 1.4);
    ck_assert_double_le(1.4, 1.4);

#test ck_assert_double_lt
    ck_assert_double_lt(1.3, 1.4);

#test ck_assert_double_ne
    ck_assert_double_ne(1.2, 1.3);

#test ck_assert_double_eq
    ck_assert_double_eq(1.3, 1.3);

#test ck_assert_float_nonnan
    ck_assert_float_nonnan(1.3);

#test ck_assert_float_nan
    ck_assert_float_nan(NAN + 1.3);

#test ck_assert_float_infinite
    ck_assert_float_infinite(INFINITY);

#test ck_assert_float_finite
    ck_assert_float_finite(1.3);

#test ck_assert_float_le_tol
    ck_assert_float_le_tol(1.3, 1.4, 0.1);

#test ck_assert_float_ge_tol
    ck_assert_float_ge_tol(1.4, 1.3, 0.1);

#test ck_assert_float_ne_tol
    ck_assert_float_ne_tol(1.3, 1.4, 0.1);

#test ck_assert_float_eq_tol
    ck_assert_float_eq_tol(1.3, 1.4, 0.2);

#test ck_assert_float_ge
    ck_assert_float_ge(1.4, 1.3);
    ck_assert_float_ge(1.4, 1.4);

#test ck_assert_float_gt
    ck_assert_float_gt(1.4, 1.3);

#test ck_assert_float_le
    ck_assert_float_le(1.2, 1.3);
    ck_assert_float_le(1.3, 1.3);

#test ck_assert_float_lt
    ck_assert_float_lt(1.3, 1.4);

#test ck_assert_float_ne
    ck_assert_float_ne(1.3, 1.4);

#test ck_assert_float_eq
    ck_assert_float_eq(1.4, 1.4);

#test ck_assert_uint_ge
    ck_assert_uint_ge(3, 2);
    ck_assert_uint_ge(2, 2);

#test ck_assert_uint_gt
    ck_assert_uint_gt(3, 2);

#test ck_assert_uint_le
    ck_assert_uint_le(2, 3);
    ck_assert_uint_le(2, 2);

#test ck_assert_uint_lt
    ck_assert_uint_lt(2, 3);

#test ck_assert_uint_ne
    ck_assert_uint_ne(2, 3);

#test ck_assert_uint_eq
    ck_assert_uint_eq(2, 2);

#test ck_assert_int_ge
    ck_assert_int_ge(3, 2);
    ck_assert_int_ge(3, 3);

#test ck_assert_int_gt
    ck_assert_int_gt(3, 2);

#test ck_assert_int_le
    ck_assert_int_le(2, 3);
    ck_assert_int_le(2, 2);

#test ck_assert_int_lt
    ck_assert_int_lt(2, 3);

#test ck_assert_int_ne
    ck_assert_int_ne(3, 2);

#test ck_assert_int_eq
    ck_assert_int_eq(3, 3);

#test-loop(0, 4) test_loop
	ck_assert_int_eq(_i, _i);

#test ck_assert_msg
    ck_assert_msg(1 + 1 == 2, "test failure");

#test ck_assert
    ck_assert(1 + 1 == 2);
